////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(num1, num2, inc = num1 < num2 ? 1 : -1) {
let arr = []; 
  if (inc > 0) {
    for (let i = num1; i <= num2; i += inc) 
      arr.push(i);
    }
  else if (num1 === num2) {
    return arr;
  }  
  else {
    for (let x = num1; x >= num2; x += inc) 
      arr.push(x);
    }
return arr;  
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
  let sum = 0
for (let i = 0; i < array.length; i++) {
  sum += array[i];
}
return sum;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
let newArr = [];  
for (let i = 0; i < array.length; i++) {
  newArr.unshift(array[i]);
}
return newArr;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
// for (let i = 0; i <= Math.floor(array.length / 2); i++) {
//   array[i] = array[array.length - 1 - i];
// }
// return array;
for (let i = 0; i < Math.floor(array.length / 2); i ++) {
  let old = array[i];
  array[i] = array [array.length - 1 - i];
  array[array.length - 1 - i] = old;
}
return array;
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
let list = null;
for (let i = array.length - 1; i >= 0; i--) {
  list = {value: array[i], rest: list};
}
return list;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray (list) {
  console.log(list);
  let result = [];
  for (let i = list; i; i = i.rest) {
    result.push(i.value)
  }
  return result;
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// function prepend(element, list) {
// return {element, rest: list};
// }
function prepend(value, list) {
return {value, rest: list};
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, num) {
if (!list) return undefined;
else if (num === 0) return list.value;
else {return nth(list.rest, num - 1);}
}
////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(a, b) {
  if (a === b) return true;

  if (a == null || typeof a != "object" ||
      b == null || typeof b != "object")
    return false;

  var propsInA = 0, propsInB = 0;

  for (var prop in a)
    propsInA += 1;

  for (var prop in b) {
    propsInB += 1;
    if (!(prop in a) || !deepEqual(a[prop], b[prop]))
      return false;
  }

  return propsInA == propsInB;
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
